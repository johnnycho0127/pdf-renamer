<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Title Renamer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- PDF.js Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .loader {
            border-top-color: #3498db;
            -webkit-animation: spin 1s linear infinite;
            animation: spin 1s linear infinite;
        }
        @-webkit-keyframes spin {
            0% { -webkit-transform: rotate(0deg); }
            100% { -webkit-transform: rotate(360deg); }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Custom File Input Styles */
        .file-input-label {
            cursor: pointer;
            border: 2px dashed #cbd5e1;
            padding: 2rem;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
        }
        .file-input-label:hover {
            background-color: #f8fafc;
            border-color: #3b82f6;
        }
        .file-input-label.dragover {
             background-color: #e0f2fe;
             border-color: #3b82f6;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 flex items-center justify-center min-h-screen">
    <div class="container mx-auto p-4 sm:p-6 lg:p-8 max-w-2xl">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 sm:p-8">
            <header class="text-center mb-6">
                <h1 class="text-3xl sm:text-4xl font-bold text-gray-800 dark:text-white">PDF Title Renamer</h1>
                <p class="text-gray-600 dark:text-gray-400 mt-2">Select a PDF file to rename it using the document's title.</p>
            </header>

            <div class="space-y-4">
                <div>
                    <label for="file-input" id="file-input-label" class="file-input-label flex flex-col items-center justify-center text-center rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <span class="mt-2 text-sm text-gray-600 dark:text-gray-400">Drag & drop a PDF file here, or click to select.</span>
                        <span id="file-name" class="mt-1 text-sm font-medium text-blue-600"></span>
                    </label>
                    <input type="file" id="file-input" class="hidden" accept=".pdf">
                </div>
            </div>

            <div id="loader-container" class="mt-6 text-center hidden">
                <div class="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mx-auto"></div>
                <p class="mt-2 text-gray-600 dark:text-gray-400">Extracting title...</p>
            </div>

            <div id="result" class="mt-6 hidden">
                <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                    <h2 class="text-lg font-semibold text-gray-800 dark:text-white">Extraction Result</h2>
                    <p class="mt-2 text-gray-600 dark:text-gray-400"><strong>Document Title:</strong> <span id="pdf-title"></span></p>
                    <p class="mt-1 text-gray-600 dark:text-gray-400"><strong>New Filename:</strong> <span id="pdf-filename" class="break-all"></span></p>
                    <button id="download-button" class="mt-4 w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300 ease-in-out flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                        </svg>
                        Download with New Name
                    </button>
                </div>
            </div>

            <div id="error-message" class="mt-6 hidden bg-red-100 dark:bg-red-900 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-200 px-4 py-3 rounded-lg" role="alert">
                <strong class="font-bold">Error:</strong>
                <span class="block sm:inline" id="error-text"></span>
            </div>
        </div>
    </div>

    <script>
        // PDF.js worker setup
        pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js`;

        // DOM Elements
        const fileInput = document.getElementById('file-input');
        const fileInputLabel = document.getElementById('file-input-label');
        const fileNameSpan = document.getElementById('file-name');
        const loaderContainer = document.getElementById('loader-container');
        const resultDiv = document.getElementById('result');
        const pdfTitleSpan = document.getElementById('pdf-title');
        const pdfFilenameSpan = document.getElementById('pdf-filename');
        const downloadButton = document.getElementById('download-button');
        const errorMessageDiv = document.getElementById('error-message');
        const errorTextSpan = document.getElementById('error-text');

        // File input and drag & drop event handlers
        fileInputLabel.addEventListener('click', () => fileInput.click());
        fileInputLabel.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileInputLabel.classList.add('dragover');
        });
        fileInputLabel.addEventListener('dragleave', () => {
            fileInputLabel.classList.remove('dragover');
        });
        fileInputLabel.addEventListener('drop', (e) => {
            e.preventDefault();
            fileInputLabel.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFile(files[0]);
            }
        });
        fileInput.addEventListener('change', (e) => {
             if (e.target.files.length > 0) {
                handleFile(e.target.files[0]);
            }
        });

        function handleFile(file) {
            if (file && file.type === 'application/pdf') {
                fileNameSpan.textContent = `Selected file: ${file.name}`;
                hideError();
                resultDiv.classList.add('hidden');
                processFile(file); // Process the file immediately upon selection
            } else {
                showError('Only PDF files can be selected.');
                fileNameSpan.textContent = '';
            }
            // Reset the input value to allow selecting the same file again.
            fileInput.value = null;
        }

        // File processing function
        async function processFile(file) {
            // Reset UI and show loader
            loaderContainer.classList.remove('hidden');
            resultDiv.classList.add('hidden');
            hideError();

            try {
                const reader = new FileReader();
                reader.onload = async (e) => {
                    try {
                        const typedarray = new Uint8Array(e.target.result);
                        const pdf = await pdfjsLib.getDocument(typedarray).promise;
                        const metadata = await pdf.getMetadata();
                        
                        let title = '';
                        // 1. Check for the 'Title' property in the PDF metadata.
                        if (metadata && metadata.info && metadata.info.Title) {
                            title = metadata.info.Title;
                        }
                        
                        // 2. If the title is empty or just whitespace, use the original filename (without extension) as the title.
                        if (!title || !title.trim()) {
                            title = file.name.replace(/\.pdf$/i, '');
                        }
                        
                        // Sanitize the title to create a valid filename.
                        const newFilename = title.replace(/[^a-z0-9_-\s]/gi, '').trim().replace(/\s+/g, '_') + '.pdf';

                        // Display results
                        pdfTitleSpan.textContent = title;
                        pdfFilenameSpan.textContent = newFilename;
                        resultDiv.classList.remove('hidden');
                        
                        // Set up the download button
                        downloadButton.onclick = () => {
                            downloadFile(file, newFilename);
                        };
                    } catch (error) {
                        console.error('Error during PDF processing:', error);
                        if (error.name === 'PasswordException') {
                            showError('This PDF is password-protected and cannot be processed.');
                        } else if (error.name === 'InvalidPDFException') {
                            showError('The selected file is not a valid or supported PDF.');
                        } else {
                            showError(`An error occurred while reading the PDF: ${error.message}`);
                        }
                    } finally {
                        loaderContainer.classList.add('hidden');
                    }
                };
                reader.onerror = () => {
                    showError('Failed to read the file.');
                    loaderContainer.classList.add('hidden');
                };
                reader.readAsArrayBuffer(file);

            } catch (error) {
                console.error('Error starting file processing:', error);
                showError(`An error occurred while processing the file: ${error.message}`);
                loaderContainer.classList.add('hidden');
            }
        }
        
        function downloadFile(blob, filename) {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url); // Clean up memory
        }

        function showError(message) {
            errorTextSpan.textContent = message;
            errorMessageDiv.classList.remove('hidden');
        }

        function hideError() {
            errorMessageDiv.classList.add('hidden');
        }
    </script>
</body>
</html>
